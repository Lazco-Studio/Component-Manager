name: Release

on:
  push:
    branches:
    - main

jobs:
  check:
    name: Check commit message
    runs-on: ubuntu-latest
    outputs:
      commit_message: ${{ steps.check_commit_message.outputs.commit_message }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check commit message
      id: check_commit_message
      run: |
        commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
        if [[ $commit_message =~ ^v[0-9]+\.[0-9]+\.[0-9] ]]; then
          echo "Commit message matches version format."
          echo "commit_message=$commit_message" >> "$GITHUB_OUTPUT"
        else
          echo "Commit message does not match version format. Skipping release."
        fi

  build:
    name: Build and compress binary
    needs: [check]
    if: ${{ needs.check.outputs.commit_message != '' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create necessary directory
      run: |
        mkdir -p dist
        mkdir -p dist/tar
        mkdir -p dist/bin

    - name: Build binary
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        go build -ldflags "-s -w -X main.GITHUB_TOKEN=$GITHUB_TOKEN" -o dist/bin/cm-cli_linux_amd64

    - name: Compress binary
      run: |
        upx -f --best --lzma dist/bin/cm-cli_linux_amd64

    - name: Compress archive
      run: |
        tar -czvf dist/tar/cm-cli_linux_amd64.tar.gz dist/bin/cm-cli_linux_amd64
        ls -al dist/bin

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: cm-cli
        path: dist/tar

  release:
    name: Create release and upload asset
    needs: [check, build]
    if: ${{ needs.check.outputs.commit_message != '' }}
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: cm-cli
        path: dist/tar

    - name: Uncompress archive
      run: |
        tar -xzvf dist/tar/cm-cli_linux_amd64.tar.gz
        ls -al dist/bin

    - name: Create release and upload asset
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.check.outputs.commit_message }}
        name: ðŸŽ‰ Release ${{ needs.check.outputs.commit_message }}
        generate_release_notes: true
        files: |
          dist/bin/cm-cli_linux_amd64

    - name: Delete artifact
      uses: geekyeggo/delete-artifact@v5
      with:
          name: cm-cli
